default:
  image: python:3-slim
variables:
  DOCKER_TLS_CERTDIR: ""
  APP_VERSION: "beta"

stages:
  - test
  - build
  - publish
  - deploy
  - test-deployment

test:
  stage: test
  script: 
   - pip install -r testing_requirements.txt
   - nosetests --with-coverage --cover-package=apiserver --cover-xml
  artifacts:
    reports:
      cobertura: coverage.xml


deploy-sites:
  cache: {}
  stage: deploy
  needs: ["test"]
  script:
    - pip install -r requirements.txt
    - python frontend/createStatic.py -u "https://datacatalog.fz-juelich.de/"
    - echo "static web content has been created"
    - mkdir public
    - cp -r site/* public/
    - echo "Static content has been deployed to gitlab pages. Will not work with backend API due to CORS."
  artifacts:
    paths:
      - public

deploy-production:
  stage: deploy
  # only run when stable tag is assigned
  only:
    - tags
  tags: [stable]
  needs: ["tag_release"]
  environment: Production
  variables:
    OS_AUTH_TYPE: v3applicationcredential
    OS_AUTH_URL: https://hdf-cloud.fz-juelich.de:5000
    OS_IDENTITY_API_VERSION: 3
    OS_REGION_NAME: "HDFCloud"
    OS_INTERFACE: public
    PRODUCTION_URL: https://datacatalog.fz-juelich.de/
    PRODUCTION_DOMAIN: datacatalog.fz-juelich.de
  script:
    - echo "Doing nothing for now. This will become a production deployment."
    - sed -i 's_/app/mnt/data_/app/mnt && mount /dev/vdb1 /app/mnt_g' deploy_scripts/cloudinit.yml
    - pip install python-openstackclient
    - openstack image list
    # - openstack server create --flavor s1 --image 149a65b5-aeb8-499f-aaa6-ec966bd28dd6 pipeline-inst
    # - reassign floating ip
    # - login on the new instance pipeline-inst
    # - sudo docker network create net #net is the docker internal network.. put it in a Variable?
    # - sudo docker-compose up -d
    # - docker build --no-cache=true --pull -f ./apiserver/Dockerfile -t api-test . #pull from $CI_REGISTRY
    # - sudo docker run --name api-test-cloud --network net -e VIRTUAL_HOST="zam10028.zam.kfa-juelich.de" -e LETSENCRYPT_HOST="zam10028.zam.kfa-juelich.de" -d api-test
    # - openstack server destroy pipeline-inst #old

deploy-testing:
  stage: deploy 
  # only run when master is updated
  only:
    - master
  except:
    - tags
  needs: ["transfer_image"]
  environment: Testing
  variables:
    OS_AUTH_TYPE: v3applicationcredential
    OS_AUTH_URL: https://hdf-cloud.fz-juelich.de:5000
    OS_IDENTITY_API_VERSION: 3
    OS_REGION_NAME: "HDFCloud"
    OS_INTERFACE: public
    TESTING_URL: https://zam10036.zam.kfa-juelich.de/
    TESTING_DOMAIN: zam10036.zam.kfa-juelich.de
    VOLUME_ID: 07a93071-5be7-4cc0-8ff3-cb34e7ed2b80
    FLOATING_IP: 134.94.199.36
  script:
    - echo "Starting the testing deployment."
    - sed -i 's_datacatalog.fz_zam10036.zam.kfa_g' deploy_scripts/cloudinit.yml
    - pip install python-openstackclient
    - OLD_ID=`openstack server show testing-deployment -f value -c id`
    # TODO create snapshot copy of old instance
    - openstack server remove floating ip $OLD_ID $FLOATING_IP
    # NO VOLUME IN TESTING DEPLOYMENT - openstack server remove volume $OLD_ID $VOLUME_ID
    - INSTANCE_ID=`openstack server create -f value -c id --prefix IMAGE_ --flavor s2 --image 149a65b5-aeb8-499f-aaa6-ec966bd28dd6 --user-data deploy_scripts/cloudinit.yml --security-group ssh --security-group www --security-group https testing-deployment`
    - while [ "`openstack server show $INSTANCE_ID -c addresses -f value`"" = "{}" ]; do sleep 5; done # wait until an address is available to attach the floating ip
    - openstack server add floating ip $INSTANCE_ID $FLOATING_IP
    # NO VOLUME IN TESTING DEPLOYMENT - openstack server add volume $INSTANCE_ID $VOLUME_ID
    - openstack server delete $OLD_ID

  
test-testing:
  cache: {}
  stage: test-deployment 
  only:
    - master
  except:
    - tags
  needs: ["deploy-testing"]
  variables:
    TESTING_URL: https://zam10036.zam.kfa-juelich.de/
  script:
    - apt update && apt -y install curl
    - echo "TODO This should run tests for the testing deployment, to ensure full functionality of the deployment."
    - echo "For now, this will be a basic health check i.e. GET / and check for 2xx code."
    - 'curl -f -H "Accept: application/json" $TESTING_URL'

test-production:
  cache: {}
  stage: test-deployment 
  only:
    - tags
  tags: [stable]
  needs: ["deploy-production"]
  environment: Production
  variables:
    PRODUCTION_URL: https://datacatalog.fz-juelich.de/
  script:
    - apt update && apt -y install curl
    - echo "TODO This should run tests for the production deployment, to ensure full functionality of the deployment."
    - echo "For now, this will be a basic health check i.e. GET / and check for 2xx code."
    - 'curl -f -H "Accept: application/json" $PRODUCTION_URL' 

publishgit-do:
  image: python:3-slim
  stage: publish
  needs: ["test"]
  only:
    - tags
  tags: [stable]
  script:
    - apt-get update 
    - apt-get install -y git
    - (git remote -v | grep gith) || git remote add gith "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/eflows4hpc/datacatalog.git"
    - git remote -v
    - git show-ref
    - export
    - git push gith $CI_COMMIT_REF_NAME


# This is an automatic push of the docker image into gitLab container repository
transfer_image:
  stage: build
  needs: ["test"]
  image: docker:latest
  services:
    - docker:dind
  variables:
    IMAGE_COMMIT_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    IMAGE_MASTER_TAG: $CI_REGISTRY_IMAGE:master
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --no-cache=true --pull -f ./apiserver/Dockerfile -t $IMAGE_COMMIT_TAG .
    - docker push $IMAGE_COMMIT_TAG
    - docker tag $IMAGE_COMMIT_TAG $IMAGE_MASTER_TAG
    - docker push $IMAGE_MASTER_TAG

tag_release:
  stage: publish
  needs: ["transfer_image"]
  image: docker:latest
  services:
    - docker:dind
  variables:
    IMAGE_LATEST_TAG: $CI_REGISTRY_IMAGE:latest
    IMAGE_STABLE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    IMAGE_COMMIT_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  only:
    - tags
  tags: [stable]
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IMAGE_COMMIT_TAG
    - docker tag $IMAGE_COMMIT_TAG $IMAGE_STABLE_TAG
    - docker tag $IMAGE_COMMIT_TAG $IMAGE_LATEST_TAG
    - docker push $IMAGE_STABLE_TAG
    - docker push $IMAGE_LATEST_TAG
